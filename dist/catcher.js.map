{"version":3,"sources":["../lib/catcher.js"],"names":[],"mappings":";;;;;;;;;;;;sBAImB,UAAU;;;;6CAEd;AACb,UAAQ,EAAA,kBAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE;AAC3B,QAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAC3B,UAAI,SAAS,CAAC,MAAM,KAAK,CAAC;AAAE,SAAgD;AAA/C,WAAG,GAAoB,EAAE;AAApB,WAAG,GAAmB,SAAS,CAAC,CAAC,CAAC;AAA7B,gBAAQ,GAAuB,KAAK;OAAC,AAC5E,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;AAAE,SAAuD;AAAtD,WAAG,GAAoB,EAAE;AAApB,WAAG,GAAmB,SAAS,CAAC,CAAC,CAAC;AAA7B,gBAAQ,GAAuB,SAAS,CAAC,CAAC,CAAC;OAAC;KACpF;;AAED,QAAI,YAAY,GAAG;AACjB,aAAO,EAAE,GAAG,CAAC,OAAO;AACpB,WAAK,EAAE,GAAG,CAAC,KAAK;AAChB,eAAS,EAAE,IAAI,CAAC,GAAG,EAAE;KACtB,CAAA;;AAED,QAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;AAC7D,QAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;AAC9F,QAAI,QAAQ,EAAE,OAAO,QAAQ,EAAE,CAAA;GAChC;;AAKD,OAAK,EAAA,iBAAG;;;;AAGN,WAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAA,GAAG,EAAI;AACvC,YAAK,QAAQ,CAAC,GAAG,EAAE;eAAM,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;OAAA,CAAC,CAAA;KAC1C,CAAC,CAAA;;AAEF,WAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,UAAC,MAAM,EAAE,OAAO,EAAK;AACpD,YAAK,QAAQ,CAAC,MAAM,EAAE,YAAM;AAC1B,cAAK,MAAM,CAAC,KAAK,CAAC,6DAA6D,EAAE,MAAM,EAAE,OAAO,CAAC,CAAA;OAClG,CAAC,CAAA;KACH,CAAC,CAAA;;GAGH;CACF;AAjBK,QAAM;SADA,aAAC,MAAM,EAAE;AAAE,UAAI,CAAC,OAAO,GAAG,MAAM,CAAA;KAAE;SAClC,eAAG;AAAE,aAAO,IAAI,CAAC,OAAO,uBAAU,CAAA;KAAE","file":"catcher.js","sourcesContent":["/*\nTODO: add heapdump\n */\n\nimport Logger from './logger'\n\nexport default {\n  logStack(msg, err, callback) {\n    if (typeof msg !== 'string') {\n      if (arguments.length === 1) [msg, err, callback] = ['', arguments[0], false]\n      if (arguments.length === 2) [msg, err, callback] = ['', arguments[0], arguments[1]]\n    }\n\n    let formattedErr = {\n      message: err.message,\n      stack: err.stack,\n      timestamp: Date.now()\n    }\n\n    this.logger.error(msg, JSON.stringify(formattedErr, null, 4))\n    if (process.env.NODE_ENV !== 'test') console.error(msg, JSON.stringify(formattedErr, null, 4))\n    if (callback) return callback()\n  },\n\n  set logger(logger) { this._logger = logger },\n  get logger() { return this._logger || Logger },\n\n  setup() {\n\n    /* $lab:coverage:off$ */\n    process.once('uncaughtException', err => {\n      this.logStack(err, () => process.exit(1))\n    })\n\n    process.on('unhandledRejection', (reason, promise) => {\n      this.logStack(reason, () => {\n        this.logger.error('Caught global unhandledRejection with reason, promise %o %o', reason, promise)\n      })\n    })\n    /* $lab:coverage:on$ */\n\n  }\n}\n"]}