{"version":3,"sources":["../../../lib/connections/slack/http.js"],"names":[],"mappings":"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","file":"http.js","sourcesContent":["import Wreck from 'wreck'\nimport Promise from 'bluebird'\nimport Hoek from 'hoek'\nimport QueryString from 'querystring'\nimport Logger from '../../logger'\n\nPromise.promisifyAll(Wreck)\n\nexport default class HttpClient {\n\n  constructor(options={}) {\n    options = Hoek.applyToDefaults({\n      host: 'https://slack.com'\n    }, options)\n\n    if (!options.token) throw Error('Must provide api token when instantiating a new slack http client')\n\n    this.host = options.host\n    this.token = options.token\n  }\n\n  get() {\n    return this._request(...arguments)\n  }\n\n  getAllChannelHistory(options={}) {\n    options = Hoek.applyToDefaults({\n      delay: 20000\n    }, options)\n\n    let delay = Number(options.delay)\n    var self = this;\n    function waitThenFetch(channel, idx) {\n      return new Promise(function(resolve) {\n        setTimeout(function() {\n          Logger.info(\"channel.id is %o\", channel.id);\n          resolve(self.get('channels.history', {query: {channel: channel.id, latest: '1443068979.007719'}}))\n        }, delay*(idx+1))\n      })\n    }\n\n    return this.get('channels.list')\n      .then(res => {\n\n        var responses = []\n        for (var i = 0; i < res.channels.length; i++) {\n          var channel = res.channels[i]\n          responses.push(waitThenFetch(channel, i))\n        }\n\n        return Promise.settle(responses)\n      })\n  }\n\n  // private\n\n  _request(type, options={ query: {} }) {\n    let defaults = { method: 'GET', requestOptions: {} }\n    options = Hoek.applyToDefaults(defaults, options)\n\n    let method = options.method,\n        url = this._buildUrl(type, options.query),\n        requestOptions = options.requestOptions;\n\n    return Wreck.requestAsync(method, url, requestOptions)\n      .then(res => Wreck.readAsync(res, {json: 'force'}))\n      .then(body => {\n        if (body.ok) return body\n        else throw Error(body)\n      })\n      .catch(err => Logger.error(`Error reading response for ${type} with options ${options}`, err))\n  }\n\n  _buildUrl(type, query={}) {\n    query = Hoek.applyToDefaults({token: this.token}, query)\n    return `${this.host}/api/${type}?${QueryString.stringify(query)}`\n  }\n}\n"]}