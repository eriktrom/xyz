{"version":3,"sources":["../lib/config.js"],"names":[],"mappings":";;;;;;;;oBACiB,MAAM;;;;kBACR,IAAI;;;;sBACA,QAAQ;;;;AAH3B,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAA;;AAK1B,IAAM,MAAM,2BAAG;;;;;;;;;;AA4Bb,OAAK,0BAAE,EA4CN;AADK,SAAK;WA1CA,eAAG;AACV,YAAI,IAAI,CAAC,MAAM,EAAE,OAAO,IAAI,CAAC,MAAM,CAAA;;AAEnC,YAAI;AACF,iBAAO,IAAI,CAAC,KAAK,CAAC,gBAAG,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAA;SAC/D,CAAC,OAAM,GAAG,EAAE;AACX,cAAI,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;;AAEnC,gBAAI,GAAG,soBAuBN,CAAC;;AAEF,gBAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;WAC7D,MAAM;AACL,kBAAM,GAAG,CAAA;WACV;SACF;OACF;;;;WAIQ,aAAC,GAAG,EAAE;AAAE,YAAI,CAAC,MAAM,GAAG,GAAG,CAAA;OAAE;;;;IACrC;CACF;AAxEK,QAAM;SAAA,eAAG;AACX,aAAO,kBAAK,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;KAC5C;;;;AAEG,WAAS;SAAA,eAAG;AACd,0BAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;AAC1B,aAAO,kBAAK,OAAO,CAAC,IAAI,CAAC,MAAM,EAAK,OAAO,CAAC,GAAG,CAAC,QAAQ,wBAAqB,CAAA;KAC9E;;;;AAEG,gBAAc;SAAA,eAAG;AACnB,0BAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;AAC1B,aAAO,kBAAK,OAAO,CAAC,IAAI,CAAC,MAAM,EAAK,OAAO,CAAC,GAAG,CAAC,QAAQ,kBAAe,CAAA;KACxE;;;;AAEG,qBAAmB;SAAA,eAAG;AACxB,aAAO,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,YAAY,CAAA;KACzD;;;;EAwDF,CAAA;;qBAEc,MAAM","file":"config.js","sourcesContent":["require('dotenv').config()\nimport Path from 'path'\nimport Fs from 'fs'\nimport Mkdirp from 'mkdirp'\n\nconst Config = {\n  get logDir() {\n    return Path.resolve(__dirname, '..', 'log')\n  },\n\n  get esLogPath() {\n    Mkdirp.sync(Config.logDir)\n    return Path.resolve(this.logDir, `${process.env.NODE_ENV}.elasticsearch.log`)\n  },\n\n  get winstonLogPath() {\n    Mkdirp.sync(Config.logDir)\n    return Path.resolve(this.logDir, `${process.env.NODE_ENV}.winston.log`)\n  },\n\n  get configuredTeamsPath() {\n    return process.env.CONFIGURED_TEAMS_PATH || 'teams.json'\n  },\n\n  /*\n  TODO: This list of types should be dynamic, meaning at runtime I should\n  be able to add to it and start a new connection to a new slack, irc or gitter\n  team/channel on the fly. Consider any streaming api for thought experiment.\n  Twitter for example, is obvious here too, although i'm not a fan, but others are.\n\n  This should be considered along with UI configured index templates for ES.\n  The UI seems similar and I'll know more by then about ES in general.\n   */\n  types: {\n    get slack() {\n      if (this._slack) return this._slack\n\n      try {\n        return JSON.parse(Fs.readFileSync(Config.configuredTeamsPath))\n      } catch(err) {\n        if (/teams\\.json/.test(err.message)) {\n\n          let msg = `\nPlease make a teams.json in root of the application or make an env\nvariable named CONFIGURED_TEAMS_PATH that points to its path.\n\nIt may contain:\n\n  {\n    \"hapi\": {\n      \"name\": \"Hapi Community\",\n      \"index\": \"hapicommunity.slack.com\",\n      \"token\": \"a-token-that-you-should-not-commit-to-git\"\n    },\n    \"ember\": {\n      \"name\": \"Ember Community\",\n      \"index\": \"embercommunity.slack.com\",\n      \"token\": \"a-different-token-keep-me-safe\"\n    },\n    \"work\": {\n      \"name\": \"A Nice Place to Work During the Day\",\n      \"index\": \"somaplacenice.slack.com\",\n      \"token\": \"keep-extremely-safe\"\n    }\n  }\n          `;\n\n          if (process.env.NODE_ENV !== 'test') console.error(msg, err)\n        } else {\n          throw err\n        }\n      }\n    },\n\n    // now that i've done this setter stuff > 1 in this lib, do i like it?\n    // It makes the getter easier to test. Yay, nay?\n    set slack(val) { this._slack = val }\n  }\n}\n\nexport default Config\n"]}